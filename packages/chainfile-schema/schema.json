{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "allOf": [
    {
      "$ref": "#/definitions/Chainfile"
    }
  ],
  "definitions": {
    "Chainfile": {
      "type": "object",
      "properties": {
        "$schema": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1024
        },
        "caip2": {
          "type": "string",
          "pattern": "^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$",
          "description": "CAIP-2 Chain ID of the blockchain network this chainfile is for."
        },
        "name": {
          "type": "string",
          "description": "Describes this chainfile.",
          "minLength": 1,
          "maxLength": 128
        },
        "params": {
          "type": "object",
          "maxProperties": 30,
          "patternProperties": {
            "^[a-z]+(_[a-z0-9]+)*$": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/ParamOptions"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "volumes": {
          "type": "object",
          "patternProperties": {
            "^(?!chainfile)[a-z0-9][a-z0-9-]{0,28}[a-z0-9]$": {
              "$ref": "#/definitions/Volume"
            }
          },
          "additionalProperties": false
        },
        "containers": {
          "type": "object",
          "minProperties": 1,
          "maxProperties": 6,
          "patternProperties": {
            "^(?!chainfile)[a-z0-9][a-z0-9-]{0,28}[a-z0-9]$": {
              "$ref": "#/definitions/Container"
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["caip2", "name", "containers"],
      "additionalProperties": false
    },
    "ParamOptions": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "boolean",
          "description": "Mark the value as a secret"
        },
        "default": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "random": {
                  "type": "object",
                  "description": "Generate a random value for orchestration that supports it.",
                  "properties": {
                    "bytes": {
                      "type": "number",
                      "minimum": 1,
                      "maximum": 256,
                      "multipleOf": 1
                    },
                    "encoding": {
                      "enum": ["hex", "base64", "base64url"]
                    }
                  },
                  "required": ["bytes", "encoding"],
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1024
        }
      },
      "additionalProperties": false
    },
    "ParamReference": {
      "type": "object",
      "properties": {
        "$param": {
          "type": "string",
          "description": "Name of the value to reference in the params section.",
          "pattern": "^[a-z]+(_[a-z0-9]+)*$"
        }
      },
      "required": ["$param"],
      "additionalProperties": false
    },
    "Volume": {
      "type": "object",
      "properties": {
        "type": {
          "enum": ["persistent", "ephemeral"]
        },
        "size": {
          "type": "string",
          "pattern": "^[1-9][0-9]*[MGT]i$"
        },
        "expansion": {
          "type": "object",
          "description": "Optional growth rate for volumes for evolving storage needs. [(size) + (rate * time)]",
          "properties": {
            "startFrom": {
              "type": "string",
              "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
              "description": "Formatted as YYYY-MM-DD to denote the date the growth rate starts."
            },
            "monthlyRate": {
              "type": "string",
              "pattern": "^[1-9][0-9]*[MGT]i$",
              "description": "The monthly rate at which the volume grows."
            }
          },
          "required": ["startFrom", "monthlyRate"],
          "additionalProperties": false
        }
      },
      "required": ["type", "size"],
      "additionalProperties": false
    },
    "VolumeMount": {
      "type": "object",
      "properties": {
        "volume": {
          "type": "string",
          "pattern": "^(?!chainfile)[a-z0-9][a-z0-9-]{0,28}[a-z0-9]$",
          "description": "Name of the volume to mount, defined in the volumes section."
        },
        "mountPath": {
          "type": "string"
        },
        "subPath": {
          "type": "string"
        }
      },
      "required": ["volume", "mountPath"],
      "additionalProperties": false
    },
    "Container": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "tag": {
          "description": "Tag of the container image.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/ParamReference"
            }
          ]
        },
        "source": {
          "type": "string",
          "description": "Source of the container image.",
          "format": "uri",
          "minLength": 1,
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1024
        },
        "endpoints": {
          "type": "object",
          "patternProperties": {
            "^(?!chainfile)[a-z0-9][a-z0-9-]{0,28}[a-z0-9]$": {
              "$ref": "#/definitions/Endpoint"
            }
          },
          "additionalProperties": false
        },
        "resources": {
          "type": "object",
          "description": "For placement of the node in a container cluster.",
          "properties": {
            "cpu": {
              "type": "number",
              "description": "CPU in vCPU (Virtual CPU Core, Relative). In multiples of 0.25, where 0.25 is 1/4 of a core.",
              "minimum": 0.25,
              "maximum": 16,
              "multipleOf": 0.25
            },
            "memory": {
              "type": "number",
              "description": "Memory in MiB (Mebibyte, Absolute). You are guaranteed to have this much memory available to your container.",
              "minimum": 64,
              "maximum": 122880,
              "multipleOf": 64
            }
          },
          "required": ["cpu", "memory"],
          "additionalProperties": false
        },
        "environment": {
          "type": "object",
          "maxProperties": 30,
          "patternProperties": {
            "^[a-zA-Z_]+[a-zA-Z0-9_]*$": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/ParamReference"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeMount"
          }
        }
      },
      "required": ["image", "tag", "source", "resources"],
      "additionalProperties": false
    },
    "Endpoint": {
      "type": "object",
      "description": "Extension to ports, endpoints are used to expose the container to the outside world with a specific protocol for interfacing.",
      "properties": {
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1024
        }
      },
      "oneOf": [
        {
          "$ref": "#/definitions/EndpointPort"
        },
        {
          "$ref": "#/definitions/EndpointHttpRest"
        },
        {
          "$ref": "#/definitions/EndpointHttpJsonRpc"
        }
      ]
    },
    "EndpointPort": {
      "type": "object",
      "properties": {
        "port": {
          "type": "number",
          "minimum": 1,
          "maximum": 65535,
          "multipleOf": 1
        }
      },
      "required": ["port"],
      "additionalProperties": false
    },
    "EndpointHttpRest": {
      "type": "object",
      "properties": {
        "port": {
          "type": "number",
          "minimum": 1,
          "maximum": 65535,
          "multipleOf": 1
        },
        "protocol": {
          "enum": ["HTTP REST", "HTTPS REST"]
        },
        "authorization": {
          "$ref": "#/definitions/EndpointHttpAuthorization"
        },
        "probes": {
          "type": "object",
          "properties": {
            "readiness": {
              "description": "Probe to determine if the container is ready to receive traffic.",
              "$ref": "#/definitions/EndpointHttpRestProbe"
            },
            "liveness": {
              "description": "Probe to determine if the container is alive. Where an application is running, but unable to make progress this is useful to determine if the container should be restarted.",
              "$ref": "#/definitions/EndpointHttpRestProbe"
            },
            "startup": {
              "description": "Probe to determine if the container has started. This is useful for containers that take a long time to start up as it will prevent containers from being prematurely marked as unhealthy.",
              "$ref": "#/definitions/EndpointHttpRestProbe"
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["port", "protocol"],
      "additionalProperties": false
    },
    "EndpointHttpRestProbe": {
      "type": "object",
      "properties": {
        "method": {
          "enum": ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS", "TRACE"]
        },
        "path": {
          "type": "string"
        },
        "body": {
          "type": "object"
        },
        "match": {
          "type": "object",
          "properties": {
            "status": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 100,
                  "maximum": 599,
                  "multipleOf": 1
                },
                {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "type": "number",
                    "minimum": 100,
                    "maximum": 599,
                    "multipleOf": 1
                  }
                }
              ]
            },
            "body": {
              "$ref": "http://json-schema.org/draft-07/schema#"
            }
          },
          "required": ["status"]
        }
      },
      "required": ["method", "path", "match"],
      "additionalProperties": false
    },
    "EndpointHttpJsonRpc": {
      "type": "object",
      "properties": {
        "port": {
          "type": "number",
          "minimum": 1,
          "maximum": 65535,
          "multipleOf": 1
        },
        "protocol": {
          "enum": ["HTTP JSON-RPC 1.0", "HTTPS JSON-RPC 1.0", "HTTP JSON-RPC 2.0", "HTTPS JSON-RPC 2.0"]
        },
        "path": {
          "type": "string"
        },
        "authorization": {
          "$ref": "#/definitions/EndpointHttpAuthorization"
        },
        "probes": {
          "type": "object",
          "properties": {
            "readiness": {
              "description": "Probe to determine if the container is ready to receive traffic.",
              "$ref": "#/definitions/EndpointHttpJsonRpcProbe"
            },
            "liveness": {
              "description": "Probe to determine if the container is alive. Where an application is running, but unable to make progress this is useful to determine if the container should be restarted.",
              "$ref": "#/definitions/EndpointHttpJsonRpcProbe"
            },
            "startup": {
              "description": "Probe to determine if the container has started. This is useful for containers that take a long time to start up as it will prevent containers from being prematurely marked as unhealthy.",
              "$ref": "#/definitions/EndpointHttpJsonRpcProbe"
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["port", "protocol"],
      "additionalProperties": false
    },
    "EndpointHttpJsonRpcProbe": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string"
        },
        "params": {
          "oneOf": [
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ]
        },
        "match": {
          "type": "object",
          "properties": {
            "result": {
              "$ref": "http://json-schema.org/draft-07/schema"
            }
          },
          "required": ["result"]
        }
      },
      "required": ["method", "params", "match"],
      "additionalProperties": false
    },
    "EndpointHttpAuthorization": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "HttpBasic"
            },
            "username": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/ParamReference"
                }
              ]
            },
            "password": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/ParamReference"
                }
              ]
            }
          },
          "required": ["type", "username", "password"],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "HttpBearer"
            },
            "token": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/ParamReference"
                }
              ]
            }
          },
          "required": ["type", "token"],
          "additionalProperties": false
        }
      ]
    }
  }
}
