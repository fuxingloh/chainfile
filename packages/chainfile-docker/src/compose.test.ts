import { Chainfile } from '@chainfile/schema';
import { describe, expect, it } from '@jest/globals';

import { Compose } from './compose';

describe('ganache.json', () => {
  const chainfile: Chainfile = {
    $schema: 'https://chainfile.org/schema.json',
    caip2: 'eip155:1337',
    name: 'Ganache',
    values: {
      url: 'http://${rpc_user}:${rpc_password}@ganache:8554',
      rpc_user: {
        random: {
          type: 'bytes',
          length: 16,
          encoding: 'hex',
        },
      },
      rpc_password: {
        random: {
          type: 'bytes',
          length: 16,
          encoding: 'hex',
        },
      },
    },
    containers: {
      ganache: {
        image: 'docker.io/trufflesuite/ganache',
        tag: 'v7.9.2',
        source: 'https://github.com/trufflesuite/ganache',
        environment: {
          RPCUSER: {
            $value: 'rpc_user',
          },
          RPCPASSWORD: {
            $value: 'rpc_password',
          },
        },
        resources: {
          cpu: 0.25,
          memory: 256,
        },
      },
    },
  };

  const compose = new Compose(chainfile, {}, 'suffix');

  it('should synth .env', async () => {
    expect(compose.synthDotEnv().split('\n')).toStrictEqual([
      expect.stringMatching(/^url=http:\/\/[0-9a-f]{32}:[0-9a-f]{32}@ganache:8554$/),
      expect.stringMatching(/^rpc_user=[0-9a-f]{32}$/),
      expect.stringMatching(/^rpc_password=[0-9a-f]{32}$/),
      expect.stringMatching(/^CHAINFILE_VALUES=\{.+}$/),
    ]);
  });

  it('should synth compose.yml', async () => {
    expect(compose.synthCompose().split('\n')).toStrictEqual([
      '# Generated by @chainfile/docker:0.0.0, do not edit manually.',
      '# Version: 0.0.0',
      '# Chainfile Name: Ganache',
      '# Chainfile CAIP-2: eip155:1337',
      '',
      'name: ganache',
      'services:',
      '  agent:',
      '    container_name: agent-suffix',
      '    image: ghcr.io/vetumorg/chainfile-agent:0.0.0',
      '    ports:',
      "      - '0:1569'",
      '    environment:',
      '      CHAINFILE_JSON: >-',
      `        ${JSON.stringify(chainfile).replaceAll('$', '$$$')}`,
      '      CHAINFILE_VALUES: ${CHAINFILE_VALUES}',
      expect.stringMatching('      DEBUG: '),
      '    volumes:',
      '      - type: volume',
      '        source: chainfile',
      '        target: /var/chainfile',
      '    networks:',
      '      chainfile: {}',
      '  ganache:',
      '    container_name: ganache-suffix',
      '    image: docker.io/trufflesuite/ganache:v7.9.2',
      '    environment:',
      '      RPCUSER: ${rpc_user}',
      '      RPCPASSWORD: ${rpc_password}',
      '    ports: []',
      '    volumes:',
      '      - type: volume',
      '        source: chainfile',
      '        target: /var/chainfile',
      '    networks:',
      '      chainfile: {}',
      'networks:',
      '  chainfile: {}',
      'volumes:',
      '  chainfile: {}',
      '',
    ]);
  });
});

it('should fail to synth with invalid chainfile', async () => {
  expect(() => new Compose({} as any, {})).toThrowError();
});

it('should have different suffix when using different Compose', async () => {
  const file: Chainfile = {
    $schema: 'https://chainfile.org/schema.json',
    caip2: 'eip155:1337',
    name: 'Ganache',
    containers: {
      ganache: {
        image: 'docker.io/trufflesuite/ganache',
        tag: 'v7.9.2',
        source: 'https://github.com/trufflesuite/ganache',
        resources: {
          cpu: 0.25,
          memory: 256,
        },
        endpoints: {},
      },
    },
  };

  const compose1 = new Compose(file, {});
  const compose2 = new Compose(file, {});
  expect(compose1.suffix).not.toEqual(compose2.suffix);
});
