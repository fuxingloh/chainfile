import { Chainfile } from '@chainfile/schema';
import { describe, expect, it } from '@workspace/jest/globals';

import { Compose } from './compose';

describe('synth', () => {
  const chainfile: Chainfile = {
    $schema: 'https://chainfile.org/schema.json',
    caip2: 'eip155:0',
    name: 'Example',
    params: {
      url: 'http://${rpc_user}:${rpc_password}@dns:1234',
      version: {},
      rpc_user: {
        secret: true,
        default: {
          random: {
            bytes: 16,
            encoding: 'hex',
          },
        },
      },
      rpc_password: {
        secret: true,
        default: {
          random: {
            bytes: 16,
            encoding: 'hex',
          },
        },
      },
    },
    volumes: {
      data: {
        type: 'ephemeral',
        size: '1Gi',
      },
    },
    containers: {
      dns: {
        image: 'docker.io/trufflesuite/ganache',
        tag: {
          $param: 'version',
        },
        source: 'https://github.com/trufflesuite/ganache',
        endpoints: {
          rpc: {
            port: 8545,
            protocol: 'HTTP JSON-RPC 2.0',
            authorization: {
              type: 'HttpBasic',
              username: {
                $param: 'rpc_user',
              },
              password: {
                $param: 'rpc_password',
              },
            },
            probes: {
              readiness: {
                params: [],
                method: 'eth_blockNumber',
                match: {
                  result: {
                    type: 'string',
                  },
                },
              },
            },
          },
        },
        environment: {
          RPCUSER: {
            $param: 'rpc_user',
          },
          RPCPASSWORD: {
            $param: 'rpc_password',
          },
        },
        resources: {
          cpu: 0.25,
          memory: 256,
        },
        mounts: [
          {
            volume: 'data',
            mountPath: '/data',
            subPath: '/dns',
          },
        ],
      },
      another: {
        image: 'docker.io/trufflesuite/ganache',
        tag: 'v7.9.2',
        source: 'https://github.com/trufflesuite/ganache',
        command: ['sh', '-c', 'echo ${ENV_1} ${ENV_2}'],
        environment: {
          ENV_1: 'value_1',
          ENV_2: {
            $param: 'url',
          },
        },
        resources: {
          cpu: 0.25,
          memory: 256,
        },
        mounts: [
          {
            volume: 'data',
            mountPath: '/data',
            subPath: '/another',
          },
        ],
      },
    },
  };

  const compose = new Compose(
    chainfile,
    {
      version: 'v1',
    },
    'suffix',
  );

  it('should synth .env', async () => {
    expect(compose.synthDotEnv().split('\n')).toStrictEqual([
      expect.stringMatching(/^url=http:\/\/[0-9a-f]{32}:[0-9a-f]{32}@dns:1234$/),
      'version=v1',
      expect.stringMatching(/^rpc_user=[0-9a-f]{32}$/),
      expect.stringMatching(/^rpc_password=[0-9a-f]{32}$/),
      expect.stringMatching(/^CHAINFILE_PARAMS=\{.+}$/),
    ]);
  });

  it('should synth compose.yml', async () => {
    expect(compose.synthCompose().split('\n')).toStrictEqual([
      '# Generated by @chainfile/docker:0.0.0, do not edit manually.',
      '# Version: 0.0.0',
      '# Chainfile Name: Example',
      '# Chainfile CAIP-2: eip155:0',
      '',
      'name: example',
      'services:',
      '  agent:',
      '    container_name: agent-suffix',
      '    image: ghcr.io/fuxingloh/chainfile-agent:0.0.0',
      '    ports:',
      "      - '0:1569'",
      '    environment:',
      '      CHAINFILE_JSON: >-',
      '        {"$$schema":"https://chainfile.org/schema.json","caip2":"eip155:0","name":"Example","params":{"url":"http://$${rpc_user}:$${rpc_password}@dns:1234","version":{},"rpc_user":{"secret":true,"default":{"random":{"bytes":16,"encoding":"hex"}}},"rpc_password":{"secret":true,"default":{"random":{"bytes":16,"encoding":"hex"}}}},"volumes":{"data":{"type":"ephemeral","size":"1Gi"}},"containers":{"dns":{"image":"docker.io/trufflesuite/ganache","tag":{"$$param":"version"},"source":"https://github.com/trufflesuite/ganache","endpoints":{"rpc":{"port":8545,"protocol":"HTTP',
      '        JSON-RPC',
      '        2.0","authorization":{"type":"HttpBasic","username":{"$$param":"rpc_user"},"password":{"$$param":"rpc_password"}},"probes":{"readiness":{"params":[],"method":"eth_blockNumber","match":{"result":{"type":"string"}}}}}},"environment":{"RPCUSER":{"$$param":"rpc_user"},"RPCPASSWORD":{"$$param":"rpc_password"}},"resources":{"cpu":0.25,"memory":256},"mounts":[{"volume":"data","mountPath":"/data","subPath":"/dns"}]},"another":{"image":"docker.io/trufflesuite/ganache","tag":"v7.9.2","source":"https://github.com/trufflesuite/ganache","command":["sh","-c","echo',
      '        $${ENV_1}',
      '        $${ENV_2}"],"environment":{"ENV_1":"value_1","ENV_2":{"$$param":"url"}},"resources":{"cpu":0.25,"memory":256},"mounts":[{"volume":"data","mountPath":"/data","subPath":"/another"}]}}}',
      '      CHAINFILE_PARAMS: ${CHAINFILE_PARAMS}',
      expect.stringMatching(/ {6}DEBUG: .+/),
      '    volumes: []',
      '    networks:',
      '      chainfile: {}',
      '  dns:',
      '    container_name: dns-suffix',
      '    image: docker.io/trufflesuite/ganache:${version}',
      '    environment:',
      '      RPCUSER: ${rpc_user}',
      '      RPCPASSWORD: ${rpc_password}',
      '    ports:',
      "      - '0:8545'",
      '    volumes:',
      '      - type: volume',
      '        source: data',
      '        target: /data',
      '        volume:',
      '          subpath: /dns',
      '    networks:',
      '      chainfile: {}',
      '  another:',
      '    container_name: another-suffix',
      '    image: docker.io/trufflesuite/ganache:v7.9.2',
      '    command:',
      '      - sh',
      "      - '-c'",
      '      - echo $${ENV_1} $${ENV_2}',
      '    environment:',
      '      ENV_1: value_1',
      '      ENV_2: ${url}',
      '    ports: []',
      '    volumes:',
      '      - type: volume',
      '        source: data',
      '        target: /data',
      '        volume:',
      '          subpath: /another',
      '    networks:',
      '      chainfile: {}',
      'networks:',
      '  chainfile: {}',
      'volumes:',
      '  data: {}',
      '',
    ]);
  });
});

it('should fail to synth with invalid chainfile', async () => {
  expect(() => new Compose({} as any, {})).toThrowError();
});

it('should have different suffix when using different Compose', async () => {
  const file: Chainfile = {
    $schema: 'https://chainfile.org/schema.json',
    caip2: 'eip155:1337',
    name: 'Ganache',
    containers: {
      ganache: {
        image: 'docker.io/trufflesuite/ganache',
        tag: 'v7.9.2',
        source: 'https://github.com/trufflesuite/ganache',
        resources: {
          cpu: 0.25,
          memory: 256,
        },
        endpoints: {},
      },
    },
  };

  const compose1 = new Compose(file, {});
  const compose2 = new Compose(file, {});
  expect(compose1.suffix).not.toEqual(compose2.suffix);
});
