import { randomBytes } from 'node:crypto';

import schema, { Chainfile, Container, ValueFactory, ValueReference } from '@chainfile/schema';
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import yaml from 'js-yaml';
import mapValues from 'lodash/mapValues';

import { version } from '../package.json';

/**
 * Synthesize a Chainfile into `docker.*.yml` & `.env` files.
 */
export class Compose {
  /**
   * @param chainfile
   * @param values
   * @param suffix for the container names to prevent conflicts.
   */
  constructor(
    private readonly chainfile: Chainfile,
    private readonly values: Record<string, string>,
    public readonly suffix: string = randomBytes(8).toString('hex'),
  ) {
    const ajv = new Ajv();
    addFormats(ajv);
    const validateFunction = ajv.compile(schema);

    if (!validateFunction(chainfile)) {
      throw new Error(ajv.errorsText(validateFunction.errors));
    }
  }

  public synthDotEnv(): string {
    const env = mapValues(this.chainfile.values ?? {}, (factory: string | ValueFactory) => {
      if (typeof factory === 'string') {
        return factory;
      }
      const type = factory.type;
      if (type === 'RandomBytes') {
        return randomBytes(factory.length).toString(factory.encoding);
      }
      if (type === 'Inject') {
        if (this.values[factory.name] !== undefined) {
          return this.values[factory.name];
        }
        if (factory.default !== undefined) {
          return factory.default;
        }
        throw new Error(`Missing Value: ${factory.name}`);
      }
      throw new Error(`Unsupported Environment Factory: ${type}`);
    });

    return Object.entries(env)
      .map(([key, value]) => `${key}=${value}`)
      .join('\n');
  }

  public synthCompose(): string {
    return [
      `# Generated by @chainfile/docker:${version}, do not edit manually.`,
      `# Version: ${version}`,
      `# Chainfile Name: ${this.chainfile.name}`,
      `# Chainfile CAIP-2: ${this.chainfile.caip2}`,
      '',
      yaml.dump(
        {
          name: this.chainfile.name.toLowerCase().replaceAll(/[^a-z0-9_-]/g, '_'),
          services: {
            ...this.createAgent(),
            ...this.createServices(),
          },
          networks: {
            chainfile: {},
          },
          volumes: {
            chainfile: {},
          },
        },
        {
          lineWidth: 120,
        },
      ),
    ].join('\n');
  }

  private createAgent(): Record<'agent', object> {
    return {
      agent: {
        container_name: `agent-${this.suffix}`,
        image: `ghcr.io/vetumorg/chainfile-agent:${version}`,
        ports: ['0:1569'],
        environment: {
          // Docker compose automatically evaluate environment literals here
          CHAINFILE_JSON: JSON.stringify(this.chainfile).replaceAll('$', '$$$'),
          CHAINFILE_VALUES: JSON.stringify(this.values).replaceAll('$', '$$$'),
        },
        volumes: [
          {
            type: 'volume',
            source: 'chainfile',
            target: '/var/chainfile',
          },
        ],
        networks: {
          chainfile: {},
        },
      },
    };
  }

  private createServices(): Record<string, object> {
    // TODO: resources (cpu, memory) is not supported for this runtime:
    //  https://docs.docker.com/compose/compose-file/compose-file-v3/#resources
    //  I'm not sure if we should since docker-compose typically runs on a single machine
    //  and utilizes the host's resources.
    //  Which limits its usefulness in orchestration when placement is not a concern.
    //  Adding them would make the compose hard limit the resources of the host even if the host
    //  has more resources available.

    function createPorts(container: Container): string[] {
      return Object.values(container.endpoints ?? {}).map((endpoint) => {
        // TODO: Support Binding P2P Port Statically
        return `0:${endpoint.port}`;
      });
    }

    interface Volume {
      type: 'volume';
      source?: string;
      target: string;
    }

    function createVolumes(container: Container): Volume[] {
      const volumes: Volume[] = [
        {
          type: 'volume',
          source: 'chainfile',
          target: '/var/chainfile',
        },
      ];

      container.volumes?.persistent?.paths.forEach((path) => {
        volumes.push({
          type: 'volume',
          target: path,
        });
      });

      container.volumes?.ephemeral?.paths.forEach((path) => {
        volumes.push({
          type: 'volume',
          target: path,
        });
      });

      return volumes;
    }

    return mapValues(this.chainfile.containers, (container, name) => {
      return {
        container_name: `${name}-${this.suffix}`,
        image: container.image + ':' + this.resolveValue(container.tag),
        command: container.command,
        environment: mapValues(container.environment ?? {}, (value: string | ValueReference) => {
          return this.resolveValue(value);
        }),
        ports: createPorts(container),
        volumes: createVolumes(container),
        networks: {
          chainfile: {},
        },
      };
    });
  }

  private resolveValue(value: string | ValueReference): string {
    if (typeof value === 'string') {
      return value;
    }
    return `$\{${value.$value}}`;
  }
}
