import { randomBytes } from 'node:crypto';

import schema, { Chainfile, Container } from '@chainfile/schema';
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import yaml from 'js-yaml';

import { version } from '../package.json';
import { synthDotEnvFile } from './dotenv';

const ajv = new Ajv();
addFormats(ajv);

const validateFunction = ajv.compile(schema);

/**
 * Synthesize a Chainfile into `docker.*.yml` & `.env` files.
 */
export class Compose {
  constructor(
    private readonly chainfile: Chainfile,
    /**
     * Suffix for the container names to prevent conflicts.
     */
    public readonly suffix: string = randomBytes(8).toString('hex'),
  ) {
    if (!validateFunction(chainfile)) {
      throw new Error(ajv.errorsText(validateFunction.errors));
    }
  }

  public synthEnv(): string {
    return synthDotEnvFile(this.chainfile.env ?? {});
  }

  public synthCompose(): string {
    return [
      `# Generated by @chainfile/docker:${version}, do not edit manually.`,
      `# Version: ${version}`,
      `# Chainfile Name: ${this.chainfile.name}`,
      `# Chainfile CAIP-2: ${this.chainfile.caip2}`,
      '',
      yaml.dump(
        {
          name: this.chainfile.name.toLowerCase().replaceAll(/[^a-z0-9_-]/g, '_'),
          services: {
            ...this.createAgent(),
            ...this.createContainers(),
          },
          networks: {
            chainfile: {},
          },
          volumes: {
            chainfile: {},
          },
        },
        {
          lineWidth: 120,
        },
      ),
    ].join('\n');
  }

  private createAgent(): Record<'agent', object> {
    const chainfileJson = JSON.stringify(this.chainfile).replaceAll('$', '$$$');

    const EnvMapping = Object.keys(this.chainfile.env ?? {}).reduce(
      (env, key) => {
        env[`CHAINFILE_ENVIRONMENT_${key}`] = `$\{${key}}`;
        return env;
      },
      {} as Record<string, string>,
    );

    return {
      agent: {
        container_name: `agent-${this.suffix}`,
        image: `ghcr.io/vetumorg/chainfile-agent:${version}`,
        ports: ['0:1569'],
        environment: {
          // Docker compose automatically evaluate environment literals here
          CHAINFILE_JSON: chainfileJson,
          ...EnvMapping,
        },
        volumes: [
          {
            type: 'volume',
            source: 'chainfile',
            target: '/var/chainfile',
          },
        ],
        networks: {
          chainfile: {},
        },
      },
    };
  }

  private createContainers(): Record<string, object> {
    // TODO: resources (cpu, memory) is not supported yet for docker-compose
    //  https://docs.docker.com/compose/compose-file/compose-file-v3/#resources
    //  I'm not sure if we should since docker-compose typically runs on a single machine
    //  and utilizes the host's resources.
    //  Which limits its usefulness in orchestration when placement is not a concern.
    //  Adding them would make the compose hard limit the resources of the host even if the host
    //  has more resources available.

    function createPorts(container: Container): string[] {
      return Object.values(container.endpoints).map((endpoint) => {
        // TODO: Support Binding P2P Port Statically
        return `0:${endpoint.port}`;
      });
    }

    interface Volume {
      type: 'volume';
      source?: string;
      target: string;
    }

    function createVolumes(container: Container): Volume[] {
      const volumes: Volume[] = [
        {
          type: 'volume',
          source: 'chainfile',
          target: '/var/chainfile',
        },
      ];

      container.volumes?.persistent?.paths.forEach((path) => {
        volumes.push({
          type: 'volume',
          target: path,
        });
      });

      container.volumes?.ephemeral?.paths.forEach((path) => {
        volumes.push({
          type: 'volume',
          target: path,
        });
      });

      return volumes;
    }

    return Object.entries(this.chainfile.containers).reduce(
      (services, [name, container]) => {
        services[name] = {
          container_name: `${name}-${this.suffix}`,
          image: container.image,
          command: container.command,
          environment: Object.entries(container.environment ?? {}).reduce(
            (env, [key, value]) => {
              return {
                ...env,
                [key]: typeof value === 'string' ? value : `$\{${value.key}}`,
              };
            },
            {} as Record<string, string>,
          ),
          ports: createPorts(container),
          volumes: createVolumes(container),
          networks: {
            chainfile: {},
          },
        };
        return services;
      },
      {} as Record<string, object>,
    );
  }
}
